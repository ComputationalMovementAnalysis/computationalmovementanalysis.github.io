[{"path":"index.html","id":"welcome-to-the-course","chapter":"Welcome to the course!","heading":"Welcome to the course!","text":"practical part course, building-skills analyzing movement data software environment R, ’ll using data ZHAW project “Prävention von Wildschweinschäden der Landwirtschaft”.project investigates spatiotemporal movement patterns wild boar (Sus scrofa) agricultural landscapes. study trajectories wild boar, practising basic analysis tasks Computational Movement Analysis (CMA).\nvideo gives nice introduction project\n","code":""},{"path":"license.html","id":"license","chapter":"License","heading":"License","text":"R Exercises created Patrick Laube, Nils Ratnaweera Nikolaos Bakogiannis Course *Computational Movement Analysis” licensed Creative Commons Attribution 4.0 International License.work licensed Creative Commons Attribution 4.0 International License.","code":""},{"path":"w0-preparation.html","id":"w0-preparation","chapter":"1 Preparation","heading":"1 Preparation","text":"course using R, RStudio Git. ask install /update programms start course, loose time course starts. cover version number expect provide tips change RStudio settings.","code":""},{"path":"w0-preparation.html","id":"check-you-version-of-r","chapter":"1 Preparation","heading":"1.1 Check you version of R","text":"Check Version R opening RStudio typing following command console.returns version number R installation, whereas first digit (4) indicates number major release, second digit (1) indicates minor release last digit (3) refers patch release. general rule thumb, want update R youdon’t current major version orare lagging two () versions behind current minor releaseIn time writing (March, 2022), current R Version 4.1.3 (released 2022-03-10 08:05:38, see cran.r-project.org). installation therefore older 4.0.0. , make sure updated R next week (now probably take long). Check instructions update R","code":"\nR.version.string\n## [1] \"R version 4.1.3 (2022-03-10)\""},{"path":"w0-preparation.html","id":"check-your-version-of-rstudio","chapter":"1 Preparation","heading":"1.2 Check your version of RStudio","text":"RStudio Graphical User Interface (GUI) use course interact R. RStudio old either recommend updating don’t latest version: check case clicking help > check updates. need update RStudio, don’t update now newer version RStudio installed next week.","code":""},{"path":"w0-preparation.html","id":"install-the-necessary-packages","chapter":"1 Preparation","heading":"1.3 Install the necessary packages","text":"haven’t already, install packages tidyverse, sf terra(using install.packages()).","code":"\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"readr\")\ninstall.packages(\"tidyr\")\ninstall.packages(\"sf\")\ninstall.packages(\"terra\")"},{"path":"w0-preparation.html","id":"install-git","chapter":"1 Preparation","heading":"1.4 Install Git","text":"Next, install Git. different Git installers choose , recommend following:Windows:\nrecommend installing Git Windows, also known msysgit “Git Bash”.\nasked “Adjusting PATH environment”, select “Git command line also 3rd-party software”\nRStudio prefers Git installed C:/Program Files/Git, recommend following convention\nOtherwise, believe good accept defaults\nrecommend installing Git Windows, also known msysgit “Git Bash”.asked “Adjusting PATH environment”, select “Git command line also 3rd-party software”RStudio prefers Git installed C:/Program Files/Git, recommend following conventionOtherwise, believe good accept defaultsmacOS:\nrecommend install Xcode command line tools (Xcode), includes Git\nGo shell enter xcode-select --install install developer command line tools\nrecommend install Xcode command line tools (Xcode), includes GitGo shell enter xcode-select --install install developer command line toolsLinux:\nUbuntu Debian Linux: sudo apt-get install git\nFedora RedHat Linux: sudo yum install git\nUbuntu Debian Linux: sudo apt-get install gitOn Fedora RedHat Linux: sudo yum install gitMuch chapter taken Bryan Heister (2021). want dive deeper using Git, highly recommend book. even deeper dive Git, read Chacon Straub (2014). books available free open source happygitwithr.com git-scm.com/book, respectively.","code":""},{"path":"w0-preparation.html","id":"configure-rstudio","chapter":"1 Preparation","heading":"1.5 Configure RStudio","text":"Now set RStudio Global options. first, close instances RStudio restart (!!!). go Tools > Global options.R General\nDeactivate option “Restore .RData workspace startup”1\nSet “Save workspace .RData exit” “Never”2\nDeactivate option “Restore .RData workspace startup”1Set “Save workspace .RData exit” “Never”2Git / SVN\nActivate option “Enable version control interface RStudio projects”\nField “Git executable:” shows (Found), browse git installation (previous step). path look something like :\nWindows: C:/Program Files/Git/bin/git.exe (C:/Program Files/Git/cmd/git.exe -path/git-bash.exe)\nLinux / macOS: /usr/bin/git\n\nActivate option “Enable version control interface RStudio projects”Field “Git executable:” shows (Found), browse git installation (previous step). path look something like :\nWindows: C:/Program Files/Git/bin/git.exe (C:/Program Files/Git/cmd/git.exe -path/git-bash.exe)\nLinux / macOS: /usr/bin/git\nWindows: C:/Program Files/Git/bin/git.exe (C:/Program Files/Git/cmd/git.exe -path/git-bash.exe)Linux / macOS: /usr/bin/gitTerminal\nSet option “New terminals open ” “Git Bash”\nSet option “New terminals open ” “Git Bash”Click “Ok” apply change close options menu.","code":""},{"path":"w0-preparation.html","id":"introduce-yourself-git","chapter":"1 Preparation","heading":"1.6 Introduce yourself to Git","text":"Now time introduce git. , need use shell terminal, going spend word shell first.shell program computer whose job run programs. looks much like R-console (bottom left RStudio) already know: place input text transferred (interpreted ) computer press “enter”. RStudio shell terminal right next R-console (tab Terminal).Every Windows comes two different shell installations: “Command prompt” “PowerShell”. installing Git now third option, “Git Bash”. shell terminal RStudio uses “Command prompt” per default, last step just switched shell “Git Bash”.Now use terminal RStudio introduce :course, replace name address credentials. Use email address use create Github account (next week).Note users already Github account:already Github account don’t want associate work course said account, recommend following approach:Create new Github account different mailaddress (e.g. student mail address)Override user.name user.email per project basis (omitting --global flag)Please feel free contact us questions .","code":"git config --global user.name \"Maria Nusslinger\"\ngit config --global user.email \"nussmar@email.com\""},{"path":"exercise-1.html","id":"exercise-1","chapter":"2 Exercise 1","heading":"2 Exercise 1","text":"exercise covers necessary steps getting ready R basic concepts setting well-structured R project. lesson introduces additional packages provide useful functions data science made available spatial data handled. exercise concludes creation first map featuring movement data.Learning Outcomes*learn structure R project.can read movement data .csv-file data.frameYou can convert spatial point data data.frame spatial object sfYou can perform basic spatial operations spatial objects RYou can produce simple maps spatial data using ggplot2You can produce simple maps spatial data using tmap","code":""},{"path":"exercise-1.html","id":"slides","chapter":"2 Exercise 1","heading":"2.1 Slides","text":"Slides Nils’ Input:","code":""},{"path":"exercise-1.html","id":"preperation","chapter":"2 Exercise 1","heading":"2.2 Preperation","text":"","code":""},{"path":"exercise-1.html","id":"folder-structure","chapter":"2 Exercise 1","heading":"2.2.1 Folder structure for this course","text":"point, probably created folder course somewhere computer. example, assume folder located : C:/Users/yourname/semester1/Modul_CMA (mentally replace actual path). dive exercises, take minute think going structure files folder. course take place 6 weeks, week receive produce various files. recommend creating separate folder week, one folder semester project, like :R-exercises take place weeks 0 5, recommend create new RStudio Project week subdirectory appropriate week. example, week folder structure look like :Note:RStudio Project located subfolder `namedweek0-rexercise`.week0-rexercise project’s directory name project namewe realize week number redundant, reason3 thisthis means week fresh start (pros cons)","code":"Course Folder (C:\\\\Users\\\\yourname\\\\semester1\\\\Modul_CMA)\n ¦--week0                                                \n ¦--week1                                                \n ¦--week2                                                \n ¦--week3                                                \n ¦--week4                                                \n ¦--week5                                                \n ¦--week6                                                \n °--semester_project Folder Week 0 (C:\\\\Users\\\\yourname\\\\semester2\\\\Modul_CMA\\\\week1)\n ¦--slides.pdf                                                  \n ¦--my_notes.docx                                               \n ¦--seminar_screenshot.jpg                                      \n °--week0-rexercise                                             \n     ¦--week0-rexercise.Rproj                                   \n     ¦--wildschwein_BE.csv                                      \n     °--my_solution.Rmd   "},{"path":"exercise-1.html","id":"create-an-rstudio-project-for-the-first-week","chapter":"2 Exercise 1","heading":"2.2.2 Create an RStudio project for the first week","text":"Create new RStudio Project (File > New Project > New Directory > New Project).Click “Browse” switch equivalent folder `` (project initiate created subdirectory folder). Click “open” confirm selectionIn field “Directory name”, type week0-rexercise. name RStudio project ’s parent directory.Check option “Create git repository”Click “Create Project”set! can start working tasks exercise 1.","code":""},{"path":"exercise-1.html","id":"w1-tasks-and-inputs","chapter":"2 Exercise 1","heading":"2.3 Tasks and inputs","text":"starting task:make sure read followed instructions section PreparationIn RStudio, open RStudio Project created week haven’t done already. can see RStudio Project project’s name visible next little RStudio logo top right corner RStudio (otherwise read Project: (None)).Download wildboar movement data : wildschwein_BE.csv (right click “Save target ..”)set everything , commit file git repo following manner:Save (R/RMarkdown) fileSwitch “Git”-Tab pane top right cornerClick “commit” open “commit-Window”Click checkbox next file(s) want commitAdd commit message explain committing (e.g. “initial commit”)Click “commit” commit changes\n","code":""},{"path":"exercise-1.html","id":"task-1-import-data","chapter":"2 Exercise 1","heading":"2.3.1 Task 1: Import data","text":"Create new R- (RMarkdown) file begin loading following packages:Move file wildschwein_BE.csv project directory import r data.frame. Assign correct column types necessary make sure time zone set correctly date/time column.Note: recommend using readr package import data (begin read_*, note underscore). functions less error prone base R functions (read.*, note period). Specifically wild boar data, recommend read_delim().Commit changes described beginning. Write meaningful commit message (e.g. “completed task 1”).","code":"\nlibrary(readr)        # to import tabular data (e.g. csv)\nlibrary(dplyr)        # to manipulate (tabular) data\nlibrary(ggplot2)      # to visualize data"},{"path":"exercise-1.html","id":"task-2-explore-data","chapter":"2 Exercise 1","heading":"2.3.2 Task 2: Explore Data","text":"use range different visualization tools (.e. R-packages) course. Several packages techniques emerged recent years, specific strengths weaknesses. base::plot()quick simple, scalable growing complexity. ggplot2 offers solutions use cases elegant, consistent syntax easy get accustomed . get know techniques later course.Get overview data creating first “map-like” plot data producing simple scatter plot ggplot2.\nSetting ggplot data done using command ggplot(wildschwein_BE, aes(Long, Lat, colour = TierID)). Creating map done via basic scatter plot command geom_point().Assigning every individual colour done using ggplot argument colour =.Commit changes described beginning. look commit history clicking “History” “Git”-Pane.\nFigure 2.1: plot look something like .\n","code":""},{"path":"exercise-1.html","id":"input-handling-spatial-data","chapter":"2 Exercise 1","heading":"2.3.3 Input: Handling spatial data","text":"now, ’ve stored location data within data frames Lat/Long columns. works well many tasks, sometimes need special spatial classes handle trajectories. get know cases next tasks, first need convert data.frame spatial object.largely rely sfwhen working vector data R. order transform data.frame sf object, need use function st_as_sf() specifying columns storing coordinates coordinate reference system.(point, assume know Coordinate Reference Systems . Check link case.)Notice st_as_sf takes EPSG code crs = argument. can find lot useful information Coordinate Reference Systems (including EPSG Codes, etc.) epsg.io.\nLet’s compare original data.frame new sf object:can see, st_as_sf() added metadata dataframe (geometry type, dimension, bbox, epsg proj4string) replaced columns Lat Long column named geometry. , new sf object similar original dataframe. fact, sf objects essentially dataframes, can verify function .data.frame():operations know handling data.frames can used sf object. Try !Instead keeping data twice (data.frame, sf object), overwrite data.frame continue working sf object now . saves memory space R avoids confusion.","code":"\n\nlibrary(sf)\n\nwildschwein_BE_sf <- st_as_sf(wildschwein_BE, \n                              coords = c(\"Long\", \"Lat\"), \n                              crs = 4326)\nwildschwein_BE## # A tibble: 51,246 × 6\n##    TierID TierName CollarID DatetimeUTC           Lat  Long\n##    <chr>  <chr>       <dbl> <dttm>              <dbl> <dbl>\n##  1 002A   Sabi        12275 2014-08-22 21:00:12  47.0  7.05\n##  2 002A   Sabi        12275 2014-08-22 21:15:16  47.0  7.05\n##  3 002A   Sabi        12275 2014-08-22 21:30:43  47.0  7.05\n##  4 002A   Sabi        12275 2014-08-22 21:46:07  47.0  7.05\n##  5 002A   Sabi        12275 2014-08-22 22:00:22  47.0  7.05\n##  6 002A   Sabi        12275 2014-08-22 22:15:10  47.0  7.05\n##  7 002A   Sabi        12275 2014-08-22 22:30:13  47.0  7.05\n##  8 002A   Sabi        12275 2014-08-22 22:45:11  47.0  7.05\n##  9 002A   Sabi        12275 2014-08-22 23:00:27  47.0  7.05\n## 10 002A   Sabi        12275 2014-08-22 23:15:41  47.0  7.05\n## # … with 51,236 more rows\nwildschwein_BE_sf## Simple feature collection with 51246 features and 4 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: 7.019889 ymin: 46.97125 xmax: 7.112075 ymax: 47.01882\n## Geodetic CRS:  WGS 84\n## # A tibble: 51,246 × 5\n##    TierID TierName CollarID DatetimeUTC                    geometry\n##  * <chr>  <chr>       <dbl> <dttm>                      <POINT [°]>\n##  1 002A   Sabi        12275 2014-08-22 21:00:12 (7.049618 46.99317)\n##  2 002A   Sabi        12275 2014-08-22 21:15:16 (7.049509 46.99416)\n##  3 002A   Sabi        12275 2014-08-22 21:30:43 (7.049406 46.99383)\n##  4 002A   Sabi        12275 2014-08-22 21:46:07 (7.049217 46.99375)\n##  5 002A   Sabi        12275 2014-08-22 22:00:22 (7.049359 46.99375)\n##  6 002A   Sabi        12275 2014-08-22 22:15:10 (7.049363 46.99382)\n##  7 002A   Sabi        12275 2014-08-22 22:30:13 (7.049326 46.99387)\n##  8 002A   Sabi        12275 2014-08-22 22:45:11 (7.049237 46.99395)\n##  9 002A   Sabi        12275 2014-08-22 23:00:27 (7.048383 46.99481)\n## 10 002A   Sabi        12275 2014-08-22 23:15:41 (7.049396 46.99373)\n## # … with 51,236 more rows\nis.data.frame(wildschwein_BE_sf)\n## [1] TRUE\n# subset rows\nwildschwein_BE_sf[1:10,]\nwildschwein_BE_sf[wildschwein_BE_sf$TierName == \"Sabi\",]\n\n# subset colums\nwildschwein_BE_sf[,2:3]\nwildschwein_BE <- st_as_sf(wildschwein_BE, \n                          coords = c(\"Long\", \"Lat\"), \n                          crs = 4326)\n\nrm(wildschwein_BE_sf) \n# we can remove this sf object, since it just eats up our memory"},{"path":"exercise-1.html","id":"task-3-project-data-from-wgs84","chapter":"2 Exercise 1","heading":"2.3.4 Task 3: Project data from WGS84","text":"can new sf object couldn’t ? One example projecting WGS84 (Lat/Long) coordinates new Swiss CRS CH1903+ LV954. using function st_transform. way, notice pattern ? package sf names functions spatial operations prefix st_*, just PostGIS.’s resulting sf object operation:Commit changes described beginning.","code":"\nwildschwein_BE\n## Simple feature collection with 51246 features and 4 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: 2568153 ymin: 1202306 xmax: 2575154 ymax: 1207609\n## Projected CRS: CH1903+ / LV95\n## # A tibble: 51,246 × 5\n##    TierID TierName CollarID DatetimeUTC                  geometry\n##  * <chr>  <chr>       <dbl> <dttm>                    <POINT [m]>\n##  1 002A   Sabi        12275 2014-08-22 21:00:12 (2570409 1204752)\n##  2 002A   Sabi        12275 2014-08-22 21:15:16 (2570402 1204863)\n##  3 002A   Sabi        12275 2014-08-22 21:30:43 (2570394 1204826)\n##  4 002A   Sabi        12275 2014-08-22 21:46:07 (2570379 1204817)\n##  5 002A   Sabi        12275 2014-08-22 22:00:22 (2570390 1204818)\n##  6 002A   Sabi        12275 2014-08-22 22:15:10 (2570390 1204825)\n##  7 002A   Sabi        12275 2014-08-22 22:30:13 (2570387 1204831)\n##  8 002A   Sabi        12275 2014-08-22 22:45:11 (2570381 1204840)\n##  9 002A   Sabi        12275 2014-08-22 23:00:27 (2570316 1204935)\n## 10 002A   Sabi        12275 2014-08-22 23:15:41 (2570393 1204815)\n## # … with 51,236 more rows"},{"path":"exercise-1.html","id":"input-calculate-convex-hull","chapter":"2 Exercise 1","heading":"2.3.5 Input: Calculate Convex Hull","text":"Transforming one Coordinate Reference System another one operation needed object spatial nature. way, able use shelf function project coordinates one CRS another. next example, rely spatial function: want calculate convex hull per Wild boar. guess function calculating convex hull called sf? guessed st_convex_hull(), right!default st_convex_hull() calculates convex hull per feature, .e. per point dataset. course makes little sense. order calculate convex hull per animal, need convert point- multipoint-features feature contains positions one animal. achieved two steps:First: add grouping variable sf object. Note new grouping variable metadata sf object. , group_by effect sf object.Second: use summarise() “dissolve” points mulipoint object.Now can run st_convex_hull new sf object.","code":"\n\nwildschwein_BE_grouped <- group_by(wildschwein_BE,TierID)\n\nwildschwein_BE_grouped\n## Simple feature collection with 51246 features and 4 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: 2568153 ymin: 1202306 xmax: 2575154 ymax: 1207609\n## Projected CRS: CH1903+ / LV95\n## # A tibble: 51,246 × 5\n## # Groups:   TierID [3]\n##    TierID TierName CollarID DatetimeUTC                  geometry\n##    <chr>  <chr>       <dbl> <dttm>                    <POINT [m]>\n##  1 002A   Sabi        12275 2014-08-22 21:00:12 (2570409 1204752)\n##  2 002A   Sabi        12275 2014-08-22 21:15:16 (2570402 1204863)\n##  3 002A   Sabi        12275 2014-08-22 21:30:43 (2570394 1204826)\n##  4 002A   Sabi        12275 2014-08-22 21:46:07 (2570379 1204817)\n##  5 002A   Sabi        12275 2014-08-22 22:00:22 (2570390 1204818)\n##  6 002A   Sabi        12275 2014-08-22 22:15:10 (2570390 1204825)\n##  7 002A   Sabi        12275 2014-08-22 22:30:13 (2570387 1204831)\n##  8 002A   Sabi        12275 2014-08-22 22:45:11 (2570381 1204840)\n##  9 002A   Sabi        12275 2014-08-22 23:00:27 (2570316 1204935)\n## 10 002A   Sabi        12275 2014-08-22 23:15:41 (2570393 1204815)\n## # … with 51,236 more rows\nwildschwein_BE_smry <- summarise(wildschwein_BE_grouped)\n\nwildschwein_BE_smry\n## Simple feature collection with 3 features and 1 field\n## Geometry type: MULTIPOINT\n## Dimension:     XY\n## Bounding box:  xmin: 2568153 ymin: 1202306 xmax: 2575154 ymax: 1207609\n## Projected CRS: CH1903+ / LV95\n## # A tibble: 3 × 2\n##   TierID                                                                geometry\n##   <chr>                                                         <MULTIPOINT [m]>\n## 1 002A   ((2568903 1206200), (2568925 1206207), (2568980 1206197), (2569024 120…\n## 2 016A   ((2569231 1205823), (2569245 1205925), (2569247 1206027), (2569251 120…\n## 3 018A   ((2568153 1205611), (2568155 1205613), (2568161 1205624), (2568162 120…\nmcp <- st_convex_hull(wildschwein_BE_smry)"},{"path":"exercise-1.html","id":"task-4-ploting-spatial-objects","chapter":"2 Exercise 1","heading":"2.3.6 Task 4: Ploting spatial objects","text":"Using base plot visualize sf objects easy enough, just try following code.since use ggplot extensively, try plot object mcp ggplot. Hint: Use layer geom_sf() add sf object.\nNote: ggplot refuses use specified CRS, need force specifying datum = coord_sf(). Try .Commit changes described beginning. look commit history clicking “History” “Git”-Pane.","code":"\nplot(mcp)"},{"path":"exercise-1.html","id":"w1-importing-raster","chapter":"2 Exercise 1","heading":"2.3.7 Input: Importing raster data","text":"next task, like add background map mcp object. Download file : pk100_BE.tif\nimport file R, use package terra function rast.pk100_BE_2056.tif three layered geotiff File. console output shows metadata including resolution, extent names layers (pk1_1, pk1_2etc). default plot method, layer displayed individually:plotRGB three layers combined single image:","code":"\nlibrary(terra)\n\npk100_BE <- terra::rast(\"00_Rawdata/pk100_BE.tif\")\n\npk100_BE\n## class       : SpatRaster \n## dimensions  : 1821, 2321, 3  (nrow, ncol, nlyr)\n## resolution  : 5, 5  (x, y)\n## extent      : 2567000, 2578605, 1199996, 1209101  (xmin, xmax, ymin, ymax)\n## coord. ref. : CH1903+ / LV95 (EPSG:2056) \n## source      : pk100_BE.tif \n## names       : pk1_1, pk1_2, pk1_3 \n## min values  :     0,     0,     0 \n## max values  :   255,   255,   255\nplot(pk100_BE)\nplotRGB(pk100_BE)"},{"path":"exercise-1.html","id":"task-5-adding-a-background-map","chapter":"2 Exercise 1","heading":"2.3.8 Task 5: Adding a background map","text":"multiple ways add background map ggplot, many require additional packages. good opportunity get know completely different package creating maps: tmap (“thematic map”). package developed syntax similar ggplot2, makes easy learn.can see, plotting layers tmap combined + sign, just ggplot2. tmap however, layer consists two objects: tm_shape() data called, tm_* object define data visualized (tm_rgb() states plotted RGB Raster Layer). Add object mcp plot manner. Read vignette trouble.Commit changes described beginning.","code":"\nlibrary(tmap)\n\ntm_shape(pk100_BE) + \n  tm_rgb() "},{"path":"exercise-1.html","id":"task-6-create-an-interactive-map","chapter":"2 Exercise 1","heading":"2.3.9 Task 6: Create an interactive map","text":"Rerun tmap()... command previous task, switch plotting mode “view”” (tmap_mode(\"view\")) beforehand. Omit raster layer (pk100_BE), won’t needing .Commit changes described beginning. look commit history clicking “History” “Git”-Pane.","code":""}]
